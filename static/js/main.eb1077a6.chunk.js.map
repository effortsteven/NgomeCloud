{"version":3,"sources":["componets/navbarlinks.js","componets/navbarcode.js","componets/Home.js","componets/todos.js","componets/addForm.js","componets/About.js","App.js","serviceWorker.js","index.js"],"names":["Navbarslinks","_ref","navs","react_default","a","createElement","className","map","nav","name","key","id","NavLink","exact","to","url","backImage","backgroundImage","Navbars","state","href","src","alt","style","marginTop","type","data-toggle","aria-expanded","aria-label","display","navbarlinks","this","Component","Home","Todos","todos","deletetodo","todolist","length","todo","onClick","desc","margin","AddTodo","handlechange","e","_this","setState","target","value","handlesubmit","preventDefault","props","addTodo","onSubmit","htmlFor","onChange","About","tempnavs","delval","filter","console","log","Math","random","concat","Object","toConsumableArray","componets_todos","addForm","App","BrowserRouter","navbarcode","Route","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb1077a6.chunk.js","sourcesContent":["import React from 'react';\nimport {NavLink} from 'react-router-dom'\nconst Navbarslinks = ({navs}) => {\n    return(\n        <ul className=\" navbar-nav  mx-auto\">\n            {   \n                navs.map(nav => {\n                return nav.name !== '' ? (\n                <li className=\"nav-item nav-item-a\" key={nav.id}>\n                    <NavLink exact to={nav.url} className=\"nav-link text-center\" >\n                    <span>\n                            {nav.name}\n                    </span>\n                    </NavLink>\n                </li>\n                ) : null;\n                })\n            }\n        </ul>\n    )\n\n    // const navlist = navs.map(nav => {\n\n    //     return (\n            \n    //     <li className=\"nav-item nav-item-a\" key={nav.id}>\n    //         <a href={nav.url} className=\"nav-link text-center\" >\n    //            <span>\n    //                 {nav.name}\n    //            </span>\n    //         </a>\n    //     </li>\n    //     )\n    // });\n    // return(\n    //     <ul className=\" navbar-nav  mx-auto\">\n    //         {   navlist    }\n    //     </ul>\n    // )\n}\n\nexport default Navbarslinks","import React, { Component } from 'react';\nimport Navbarslinks from './navbarlinks';\n\n        const backImage = {\n            backgroundImage: 'url(assets/img/kit/bg21.jpg)'\n        }\n    class Navbars extends Component {\n    state = {\n        navs :[\n        {  id: 1, name: 'Home', url: '/'},\n        {  id: 2, name: 'About US', url:  '/About'},\n        {  id: 3, name: 'Contact US', url: '/Contact'},\n        {  id: 4, name: 'Gallery', url:'/Gallery'}\n        ]\n    }\n\n    // receivenavs = ({tempnavs}) => {\n    // let oldnavs = [...this.state.navs, tempnavs];\n    // this.setState({\n    //   navs : oldnavs\n    // })\n    // }\n    render() {\n        return (\n        <div className=\"header-2\">\n            <nav className=\"navbar fixed-top  navbar-expand-lg \"  id=\"sectionsNav\">\n                <label className=\"call-us-top\">Call Free: 080 011 0041 </label>\n                <div className=\"container col-lg-12\">\n                    <div className=\"navbar-translate col-lg-3 ml-5\" id=\"mainTitle\">\n                        <a className=\"navbar-brand nav-a\" href=\"index.html\"> \n                            <img src=\"../assets/img/kit/nic_2.png\" alt=\"logo\" style={{marginTop: '-5px'}}className=\"bland-img\"></img>\n                            National Insurance Corparation\n                        </a>\n                        <button  className=\"navbar-toggler navbar-toggler-btn\" type=\"button\" data-toggle=\"collapse\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                            <div style={{display: 'inline-block'}}>\n                                <span className=\"navbar-toggler-icon\"></span>\n                                <span className=\"navbar-toggler-icon\"></span>\n                                <span className=\"navbar-toggler-icon\"></span>\n                            </div>\n                            <span className=\"navbar-toggler-title\">Menu</span>\n                        </button>\n                    </div>\n                    <div className=\"collapse navbar-collapse col-lg-9\">\n                            <Navbarslinks navs={ this.state.navs } />\n                    </div>\n                </div>\n            </nav>\n            <div className=\"land-page-1\">\n                <div className=\"page-header header-filter\" style={backImage}>\n                    <div className=\"container land-page-cont-1\">\n                        \n                    </div>\n                </div>\n            </div>\n        </div>\n        );\n    }\n}\nexport default Navbars","import React, { Component } from 'react';\n\nclass Home extends Component {\n\n    render(){\n        return(\n            <div>\n                <h1>hello</h1>\n            </div>\n        )\n    }\n}\nexport default Home","import React from 'react';\n\nconst Todos = ({todos, deletetodo}) => {\n    let todolist = todos.length ? (\n        todos.map(todo => {\n            return(\n                <div className=\"collection-item\" key={todo.id}>\n                <span onClick={() => {deletetodo(todo.id)}}>{todo.desc}</span>\n                </div>\n            )\n        })\n    ) : (\n        <p className=\"text-success\">You have no Todos!!</p>\n    )\n    return(\n        <div className=\"todos container\">\n        {todolist}\n        </div>\n    )\n}\nexport default Todos","import React, { Component } from 'react';\n\nconst marginTop = {\n    margin: '100px 0 0 0'\n}\nclass AddTodo extends  Component {\n    state = {\n        desc: ''\n    }\n    handlechange = (e) => {\n        this.setState({\n            desc: e.target.value\n        })\n    }\n    handlesubmit = (e) =>{\n        e.preventDefault();\n        this.props.addTodo(this.state)\n        this.setState({\n            desc: ''\n        })\n    }\n    render(){\n        return (\n            <div>\n                <form style={marginTop} onSubmit={this.handlesubmit}>\n                    <label htmlFor=\"desc\">Add Todo:</label>\n                <input type=\"text\" onChange={this.handlechange} name='desc' className='form-control' value={this.state.desc}/>\n                </form>\n            </div>\n        )\n    }\n}\nexport default AddTodo","import React, { Component } from 'react';\nimport Todos from './todos';\nimport AddTodo from './addForm';\n\nclass About extends Component {\n\n    state = {\n        tempnavs : [\n          {}\n        ],\n        todos : [\n          { id: 1, desc: 'send files'},\n          { id: 2, desc:  'delete files'}\n        ]\n      }\n\n\n  deletetodo = (id) => {\n    let delval = this.state.todos.filter(todo =>{\n      return todo.id !== id\n    });\n    this.setState({\n      todos: delval\n    })\n    console.log('ID '+id + ': was deleted!')\n  }\n  addTodo = (todo) => {\n    todo.id = Math.random();\n    let todos = [...this.state.todos, todo];\n    this.setState({\n      todos\n    })\n  }\n\n    render(){\n        return (\n            <div>\n                <h1 className=\"text-info\">Todos</h1>\n                <Todos todos={this.state.todos} deletetodo={this.deletetodo}/>\n                <AddTodo  addTodo={this.addTodo}/>\n            </div>\n        )\n    }\n}\nexport default About","import React, { Component } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Navbars from './componets/navbarcode.js';\nimport Home from './componets/Home';\nimport About from './componets/About';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div>\n          <Navbars />\n          <Route path='/' component={Home} />\n          <Route path='/about' component={About} />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './bootstrap.css';\n// import './core.css';\n// import './core_2.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}